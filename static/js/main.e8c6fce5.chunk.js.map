{"version":3,"sources":["components/EditButton.js","components/Checkboxes.js","localStorage.js","components/Dashboard.js","App.js","index.js"],"names":["EditButton","className","onClick","this","props","icon","faPen","React","Component","Checkbox","id","type","checked","toggleCheckbox","CheckboxContainer","editMode","onInput","changeLabel","value","checkboxes","label","resetCheckboxes","map","checkbox","i","addCheckbox","removeCheckbox","removeCheckboxes","Checkboxes","checkboxContainer","addCheckboxes","Storage","window","localStorage","setItem","JSON","stringify","found","getItem","parse","Dashboard","componentDidMount","loadedCheckboxes","storage","loadCheckboxes","setState","toggleEditMode","state","storeCheckboxes","j","checkboxState","forEach","push","document","getElementById","splice","length","event","target","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.e8c6fce5.chunk.js","sourcesContent":["import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPen } from '@fortawesome/free-solid-svg-icons'\n\nclass EditButton extends React.Component {\n    render() {\n        return (\n            <button className=\"edit-button\" onClick={this.props.onClick}>\n                <FontAwesomeIcon icon={faPen} />\n            </button>\n        );\n    }\n}\n\nexport default EditButton;\n","import \"./Checkboxes.css\";\nimport React from \"react\";\n\nclass Checkbox extends React.Component {\n    render() {\n        return (\n            <li id={\"checkbox-\" + this.props.id} className=\"checkbox\">\n                <input\n                    type=\"checkbox\"\n                    checked={this.props.checked}\n                    onClick={this.props.toggleCheckbox}\n                ></input>\n            </li>\n        );\n    }\n}\n\nclass CheckboxContainer extends React.Component {\n    render() {\n        return (\n            <li id={\"checkbox-row-\" + this.props.id} className=\"checkbox-row\">\n                {this.props.editMode ? (\n                    <input\n                        type=\"text\"\n                        onInput={this.props.changeLabel}\n                        value={this.props.checkboxes.label}\n                    ></input>\n                ) : (\n                    <i className={this.props.checkboxes.label} onClick={this.props.resetCheckboxes}></i>\n                )}\n                <ul>\n                    {this.props.checkboxes.checkboxes.map((checkbox, i) => {\n                        return (\n                            <Checkbox\n                                id={this.props.id + \"-\" + i}\n                                checked={checkbox.checked}\n                                toggleCheckbox={this.props.toggleCheckbox(i)}\n                            />\n                        );\n                    })}\n                </ul>\n                {this.props.editMode ? (\n                    <>\n                        <button\n                            className=\"add-checkbox-button\"\n                            onClick={this.props.addCheckbox}\n                        >\n                            +\n                        </button>\n                        <button\n                            className=\"remove-checkbox-button\"\n                            onClick={this.props.removeCheckbox}\n                        >\n                            -\n                        </button>\n                        <button\n                            className=\"remove-checkbox-row-button\"\n                            onClick={this.props.removeCheckboxes}\n                        >\n                            Remove\n                        </button>\n                    </>\n                ) : (\n                    \"\"\n                )}\n            </li>\n        );\n    }\n}\n\nclass Checkboxes extends React.Component {\n    render() {\n        return (\n            <ul className=\"checkbox-column\">\n                {this.props.checkboxes.map((checkboxContainer, i) => {\n                    return (\n                        <CheckboxContainer\n                            id={i}\n                            editMode={this.props.editMode}\n                            checkboxes={checkboxContainer}\n                            toggleCheckbox={this.props.toggleCheckbox(i)}\n                            resetCheckboxes={this.props.resetCheckboxes(i)}\n                            removeCheckboxes={this.props.removeCheckboxes(i)}\n                            addCheckbox={this.props.addCheckbox(i)}\n                            removeCheckbox={this.props.removeCheckbox(i)}\n                            changeLabel={this.props.changeLabel(i)}\n                        />\n                    );\n                })}\n                {this.props.editMode ? (\n                    <>\n                        <input\n                            id=\"task-name-field\"\n                            type=\"text\"\n                        ></input>\n                        <button\n                            className=\"add-checkbox-row-button\"\n                            onClick={this.props.addCheckboxes}\n                        >\n                            Add new task\n                        </button>\n                    </>\n                ) : (\n                    \"\"\n                )}\n            </ul>\n        );\n    }\n}\n\nexport default Checkboxes;\n","class Storage {\n    storeCheckboxes(checkboxes) {\n        window.localStorage.setItem('checkboxes', JSON.stringify(checkboxes));\n        return checkboxes;\n    }\n\n    loadCheckboxes() {\n        const found = window.localStorage.getItem('checkboxes');\n        if (!found) return null;\n        return JSON.parse(found);\n    }\n}\n\nexport default Storage;","import \"./Dashboard.css\";\nimport React from \"react\";\nimport EditButton from \"./EditButton.js\";\nimport Checkboxes from \"./Checkboxes.js\";\nimport Storage from \"../localStorage.js\";\n\nclass Dashboard extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.storage = new Storage();\n\n        this.state = {\n            editMode: false,\n            checkboxes: [\n                {\n                    label: \"fa fa-fw fa-clock\",\n                    checkboxes: [\n                        { checked: false },\n                        { checked: true },\n                        { checked: false },\n                    ],\n                },\n                {\n                    label: \"fa fa-fw fa-dumbbell\",\n                    checkboxes: [\n                        { checked: false },\n                        { checked: false },\n                        { checked: false },\n                    ],\n                },\n            ],\n        };\n    }\n\n    componentDidMount = () => {\n        const loadedCheckboxes = this.storage.loadCheckboxes();\n        if (loadedCheckboxes) this.setState({ checkboxes: loadedCheckboxes });\n    };\n\n    toggleEditMode = () => {\n        this.setState({ editMode: !this.state.editMode });\n        this.storage.storeCheckboxes(this.state.checkboxes);\n    };\n\n    toggleCheckbox = (i) => (j) => () => {\n        const checkboxState = this.state.checkboxes;\n        checkboxState[i].checkboxes[j].checked = !checkboxState[i].checkboxes[j]\n            .checked;\n        this.setState({ checkboxes: checkboxState });\n        this.storage.storeCheckboxes(checkboxState);\n    };\n\n    resetCheckboxes = (i) => () => {\n        const checkboxState = this.state.checkboxes;\n        checkboxState[i].checkboxes.forEach((checkbox) => {\n            checkbox.checked = false;\n        });\n        this.setState({ checkboxes: checkboxState });\n        this.storage.storeCheckboxes(checkboxState);\n    };\n\n    addCheckboxes = () => {\n        const checkboxState = this.state.checkboxes;\n        checkboxState.push({\n            label: document.getElementById(\"task-name-field\").value,\n            checkboxes: [{ checked: false }],\n        });\n        document.getElementById(\"task-name-field\").value = \"\";\n        this.setState({ checkboxes: checkboxState });\n    };\n\n    removeCheckboxes = (i) => () => {\n        const checkboxState = this.state.checkboxes;\n        checkboxState.splice(i, 1);\n        this.setState({ checkboxes: checkboxState });\n    };\n\n    addCheckbox = (i) => () => {\n        const checkboxState = this.state.checkboxes;\n        checkboxState[i].checkboxes.push({ checked: false });\n        this.setState({ checkboxes: checkboxState });\n    };\n\n    removeCheckbox = (i) => () => {\n        const checkboxState = this.state.checkboxes;\n        checkboxState[i].checkboxes.splice(\n            checkboxState[i].checkboxes.length - 1,\n            1\n        );\n        this.setState({ checkboxes: checkboxState });\n    };\n\n    changeLabel = (i) => (event) => {\n        const checkboxState = this.state.checkboxes;\n        checkboxState[i].label = event.target.value;\n        this.setState({ checkboxes: checkboxState });\n    };\n\n    render() {\n        return (\n            <section className=\"dashboard\">\n                <Checkboxes\n                    editMode={this.state.editMode}\n                    checkboxes={this.state.checkboxes}\n                    toggleCheckbox={this.toggleCheckbox}\n                    resetCheckboxes={this.resetCheckboxes}\n                    addCheckboxes={this.addCheckboxes}\n                    removeCheckboxes={this.removeCheckboxes}\n                    addCheckbox={this.addCheckbox}\n                    removeCheckbox={this.removeCheckbox}\n                    changeLabel={this.changeLabel}\n                />\n                <EditButton onClick={this.toggleEditMode} />\n            </section>\n        );\n    }\n}\n\nexport default Dashboard;\n","import \"./App.css\";\nimport \"@fortawesome/fontawesome-free/css/all.css\";\nimport \"./components/Dashboard.js\";\nimport Dashboard from \"./components/Dashboard.js\";\n\nfunction App() {\n    return <Dashboard />;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}