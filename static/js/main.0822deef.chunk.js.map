{"version":3,"sources":["components/EditButton.js","components/FullscreenButton.js","components/Checkboxes.js","localStorage.js","components/Dashboard.js","App.js","index.js"],"names":["EditButton","className","onClick","this","props","icon","faPen","React","Component","FullscreenButton","onFullscreenChange","setState","fullscreen","Boolean","document","fullscreenElement","toggleFullscreen","state","exitFullscreen","documentElement","requestFullscreen","addEventListener","removeEventListener","faCompress","faExpand","Checkbox","id","type","checked","toggleCheckbox","CheckboxContainer","label","checkboxes","includes","lastCheckTime","lastChecked","editMode","onInput","changeLabel","value","resetCheckboxes","map","checkbox","i","addCheckbox","removeCheckbox","removeCheckboxes","Checkboxes","checkboxContainer","addCheckboxes","Storage","window","localStorage","setItem","JSON","stringify","found","getItem","parse","Dashboard","componentDidMount","loadedCheckboxes","storage","loadCheckboxes","toggleEditMode","storeCheckboxes","j","time","Date","checkboxState","formatTime","forEach","getDate","getMonth","getFullYear","getHours","getMinutes","getSuffix","number","push","getElementById","splice","length","event","target","undefined","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.0822deef.chunk.js","sourcesContent":["import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPen } from '@fortawesome/free-solid-svg-icons'\n\nclass EditButton extends React.Component {\n    render() {\n        return (\n            <button className=\"edit-button\" onClick={this.props.onClick}>\n                <FontAwesomeIcon icon={faPen} />\n            </button>\n        );\n    }\n}\n\nexport default EditButton;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faExpand, faCompress } from \"@fortawesome/free-solid-svg-icons\";\n\nclass FullscreenButton extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            fullscreen: false,\n        };\n    }\n\n    componentDidMount() {\n        document.addEventListener(\"fullscreenchange\", this.onFullscreenChange);\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener(\n            \"fullscreenchange\",\n            this.onFullscreenChange\n        );\n    }\n\n    onFullscreenChange = () => {\n        this.setState({ fullscreen: Boolean(document.fullscreenElement) });\n    };\n\n    toggleFullscreen = () => {\n        if (!this.state.fullscreen) {\n            document.documentElement.requestFullscreen();\n        } else {\n            document.exitFullscreen();\n        }\n    }\n\n    render() {\n        return (\n            <button\n                className=\"fullscreen-button\"\n                onClick={this.toggleFullscreen}\n            >\n                <FontAwesomeIcon\n                    icon={this.state.fullscreen ? faCompress : faExpand}\n                />\n            </button>\n        );\n    }\n}\n\nexport default FullscreenButton;\n","import \"./Checkboxes.css\";\nimport React from \"react\";\n\nclass Checkbox extends React.Component {\n    render() {\n        return (\n            <li id={\"checkbox-\" + this.props.id} className=\"checkbox\">\n                <input\n                    type=\"checkbox\"\n                    checked={this.props.checked}\n                    onClick={this.props.toggleCheckbox}\n                ></input>\n            </li>\n        );\n    }\n}\n\nclass CheckboxContainer extends React.Component {\n    render() {\n        let label = this.props.checkboxes.label;\n        if (!label.includes('fa-fw')) label += ' fa-fw';\n\n        const lastCheckTime = this.props.checkboxes.lastChecked ? `${this.props.checkboxes.lastChecked}` : 'never';\n\n        return (\n            <li id={\"checkbox-row-\" + this.props.id} className=\"checkbox-row\">\n                {this.props.editMode ? (\n                    <input\n                        type=\"text\"\n                        onInput={this.props.changeLabel}\n                        value={this.props.checkboxes.label}\n                    ></input>\n                ) : (\n                    <i className={label} onClick={this.props.resetCheckboxes}></i>\n                )}\n                <ul>\n                    {this.props.checkboxes.checkboxes.map((checkbox, i) => {\n                        return (\n                            <Checkbox\n                                id={this.props.id + \"-\" + i}\n                                checked={checkbox.checked}\n                                toggleCheckbox={this.props.toggleCheckbox(i)}\n                            />\n                        );\n                    })}\n                </ul>\n                \n                {this.props.editMode ? (\n                    <>\n                        <button\n                            className=\"add-checkbox-button\"\n                            onClick={this.props.addCheckbox}\n                        >\n                            +\n                        </button>\n                        <button\n                            className=\"remove-checkbox-button\"\n                            onClick={this.props.removeCheckbox}\n                        >\n                            -\n                        </button>\n                        <button\n                            className=\"remove-checkbox-row-button\"\n                            onClick={this.props.removeCheckboxes}\n                        >\n                            Remove\n                        </button>\n                    </>\n                ) : (\n                    <small>{lastCheckTime}</small>\n                )}\n            </li>\n        );\n    }\n}\n\nclass Checkboxes extends React.Component {\n    render() {\n        return (\n            <ul className=\"checkbox-column\">\n                {this.props.checkboxes.map((checkboxContainer, i) => {\n                    return (\n                        <CheckboxContainer\n                            id={i}\n                            editMode={this.props.editMode}\n                            checkboxes={checkboxContainer}\n                            toggleCheckbox={this.props.toggleCheckbox(i)}\n                            resetCheckboxes={this.props.resetCheckboxes(i)}\n                            removeCheckboxes={this.props.removeCheckboxes(i)}\n                            addCheckbox={this.props.addCheckbox(i)}\n                            removeCheckbox={this.props.removeCheckbox(i)}\n                            changeLabel={this.props.changeLabel(i)}\n                        />\n                    );\n                })}\n                {this.props.editMode ? (\n                    <div className=\"row\">\n                        <input\n                            id=\"task-name-field\"\n                            type=\"text\"\n                        ></input>\n                        <button\n                            className=\"add-checkbox-row-button\"\n                            onClick={this.props.addCheckboxes}\n                        >\n                            Add new task\n                        </button>\n                    </div>\n                ) : (\n                    \"\"\n                )}\n            </ul>\n        );\n    }\n}\n\nexport default Checkboxes;\n","class Storage {\n    storeCheckboxes(checkboxes) {\n        window.localStorage.setItem('checkboxes', JSON.stringify(checkboxes));\n        return checkboxes;\n    }\n\n    loadCheckboxes() {\n        const found = window.localStorage.getItem('checkboxes');\n        if (!found) return null;\n        return JSON.parse(found);\n    }\n}\n\nexport default Storage;","import \"./Dashboard.css\";\nimport React from \"react\";\nimport EditButton from \"./EditButton.js\";\nimport FullscreenButton from \"./FullscreenButton.js\";\nimport Checkboxes from \"./Checkboxes.js\";\nimport Storage from \"../localStorage.js\";\n\nclass Dashboard extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.storage = new Storage();\n\n        this.state = {\n            editMode: false,\n            checkboxes: [\n                {\n                    label: \"fa fa-fw fa-clock\",\n                    lastChecked: undefined,\n                    checkboxes: [\n                        { checked: false },\n                        { checked: true },\n                        { checked: false },\n                    ],\n                },\n                {\n                    label: \"fa fa-fw fa-dumbbell\",\n                    lastChecked: undefined,\n                    checkboxes: [\n                        { checked: false },\n                        { checked: false },\n                        { checked: false },\n                    ],\n                },\n            ],\n        };\n    }\n\n    componentDidMount = () => {\n        const loadedCheckboxes = this.storage.loadCheckboxes();\n        if (loadedCheckboxes) this.setState({ checkboxes: loadedCheckboxes });\n    };\n\n    toggleEditMode = () => {\n        this.setState({ editMode: !this.state.editMode });\n        this.storage.storeCheckboxes(this.state.checkboxes);\n    };\n\n    toggleCheckbox = (i) => (j) => () => {\n        const time = new Date();\n        const checkboxState = this.state.checkboxes;\n        checkboxState[i].checkboxes[j].checked = !checkboxState[i].checkboxes[j]\n            .checked;\n        checkboxState[i].lastChecked = this.formatTime(time);\n        this.setState({ checkboxes: checkboxState });\n        this.storage.storeCheckboxes(checkboxState);\n    };\n\n    resetCheckboxes = (i) => () => {\n        const time = new Date();\n        const checkboxState = this.state.checkboxes;\n        checkboxState[i].checkboxes.forEach((checkbox) => {\n            checkbox.checked = false;\n        });\n        checkboxState[i].lastChecked = this.formatTime(time);\n        this.setState({ checkboxes: checkboxState });\n        this.storage.storeCheckboxes(checkboxState);\n    };\n\n    formatTime = (time) => {\n        return `${time.getDate()}.${time.getMonth()+1}.${time.getFullYear()} ${time.getHours()}:${time.getMinutes()}`;\n    };\n\n    getSuffix = (number) => {\n        if (number === 11 || number === 12 || number === 13) return 'th';\n        switch (number % 10) {\n            case 1: return 'st';\n            case 2: return 'nd';\n            case 3: return 'rd';\n            default:\n                return 'th';\n        }\n    }\n\n    addCheckboxes = () => {\n        const checkboxState = this.state.checkboxes;\n        checkboxState.push({\n            label: document.getElementById(\"task-name-field\").value,\n            checkboxes: [{ checked: false }],\n        });\n        document.getElementById(\"task-name-field\").value = \"\";\n        this.setState({ checkboxes: checkboxState });\n    };\n\n    removeCheckboxes = (i) => () => {\n        const checkboxState = this.state.checkboxes;\n        checkboxState.splice(i, 1);\n        this.setState({ checkboxes: checkboxState });\n    };\n\n    addCheckbox = (i) => () => {\n        const checkboxState = this.state.checkboxes;\n        checkboxState[i].checkboxes.push({ checked: false });\n        this.setState({ checkboxes: checkboxState });\n    };\n\n    removeCheckbox = (i) => () => {\n        const checkboxState = this.state.checkboxes;\n        checkboxState[i].checkboxes.splice(\n            checkboxState[i].checkboxes.length - 1,\n            1\n        );\n        this.setState({ checkboxes: checkboxState });\n    };\n\n    changeLabel = (i) => (event) => {\n        const checkboxState = this.state.checkboxes;\n        checkboxState[i].label = event.target.value;\n        this.setState({ checkboxes: checkboxState });\n    };\n\n    render() {\n        return (\n            <section className=\"dashboard\">\n                <Checkboxes\n                    editMode={this.state.editMode}\n                    checkboxes={this.state.checkboxes}\n                    toggleCheckbox={this.toggleCheckbox}\n                    resetCheckboxes={this.resetCheckboxes}\n                    addCheckboxes={this.addCheckboxes}\n                    removeCheckboxes={this.removeCheckboxes}\n                    addCheckbox={this.addCheckbox}\n                    removeCheckbox={this.removeCheckbox}\n                    changeLabel={this.changeLabel}\n                />\n                <FullscreenButton />\n                <EditButton onClick={this.toggleEditMode} />\n            </section>\n        );\n    }\n}\n\nexport default Dashboard;\n","import \"./App.css\";\nimport \"@fortawesome/fontawesome-free/css/all.css\";\nimport \"./components/Dashboard.js\";\nimport Dashboard from \"./components/Dashboard.js\";\n\nfunction App() {\n    return <Dashboard />;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}